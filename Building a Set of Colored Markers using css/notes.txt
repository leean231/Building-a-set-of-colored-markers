As a reminder, here's how to target a paragraph element and align it to the right:

p {
  text-align: right;
}


To give the markers different colors, you will need to add a unique class to each one. 
Multiple classes can be added to an element by listing them in the class attribute and 
separating them with a space. For example, the following adds both the animal and dog 
classes to a div element.

<div class="animal dog">
If you add multiple classes to an HTML element, the styles of the first classes you 
list may be overridden by later classes.


There are two main color models: the additive RGB (red, green, blue) model used in 
electronic devices, and the subtractive CMYK (cyan, magenta, yellow, black) model used in print.

In this project, you'll work with the RGB model. This means that colors begin as black, 
and change as different levels of red, green, and blue are introduced. 
An easy way to see this is with the CSS rgb function.


A function is a piece of code that can take an input and perform a specific action. 
The CSS rgb function accepts values, or arguments, for red, green, and blue, and 
produces a color:

rgb(red, green, blue);
Each red, green, and blue value is a number from 0 to 255. 
0 means that there's 0% of that color, and is black. 255 means that there's 100% of that color.

Primary colors
.one{
  background-color: rgb(255, 0, 0) ---> red
}

.two{
  background-color: rgb(0, 255, 0); ---->green
}

.three{
  background-color: rgb(0, 0, 255); ----> blue
}

Secondary colors
.one{
  background-color: rgb(255, 255, 0)-----> yellow  (Combination of red and green)
}

.two{
  background-color: rgb(0, 255, 255);----> cyan (Combination of green and blue)
}

.three{
  background-color: rgb(255, 0, 255);-----> magenta (Combination of red and blue)
}

Tertiary colors.
.one{
  background-color: rgb(255, 127, 0) ----> orange  (Combination of red and yellow)
}
.two {
  background-color: rgb(0, 255, 127); ----> spring green (Combination of green and yellow)
}
.three {
  background-color: rgb(127, 0, 255); ----> violet (Combination of red and blue)
}

There are three more tertiary colors: 
chartreuse green (green + yellow), azure (blue + cyan), and rose (red + magenta).

.one {
  background-color: rgb(127, 255, 0);------> chartreuse green (green + yellow)
}

.two {
  background-color: rgb(0, 127, 255); ----> azure (blue + cyan)
}

.three {
  background-color: rgb(255, 0, 127);-----> rose (red + magenta).
}


the rgb function uses the additive color model, where colors start as black 
and change as the values of red, green, and blue increase.

A color wheel is a circle where similar colors, or hues, are near each other, 
and different ones are further apart. For example, pure red is between the hues rose and orange.

Two colors that are opposite from each other on the color wheel are called complementary colors.
If two complementary colors are combined, they produce gray. But when they are placed 
side-by-side, these colors produce strong visual contrast and appear brighter.

NOTE:-
Notice that the red and cyan colors are very bright right next to each other. 
This contrast can be distracting if it's overused on a website, and can make 
text hard to read if it's placed on a complementary-colored background.

It's better practice to choose one color as the dominant color, and use its
 complementary color as an accent to bring attention to certain content on the page.

 A very common way to apply color to an element with CSS is with hexadecimal or hex values.
  While hex values sound complicated, they're really just another form of RGB values.

Hex color values start with a # character and take six characters from 0-9 and A-F. 
The first pair of characters represent red, the second pair represent green, 
and the third pair represent blue. For example, #4B5320.

You may already be familiar with decimal, or base 10 values, which go from 0 - 9. 
Hexadecimal, or base 16 values, go from 0 - 9, then A - F:

0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F
With hex colors, 00 is 0% of that color, and FF is 100%. 
So #00FF00 translates to 0% red, 100% green, and 0% blue, and is the same as rgb(0, 255, 0).


The HSL color model, or hue, saturation, and lightness, is another way to represent colors.

The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, 
a percentage from 0 to 100 for saturation, and a percentage from 0 to 100 for lightness.

If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, 
and blue is at 240 degrees.

Saturation is the intensity of a color from 0%, or gray, to 100% for pure color. 
You must add the percent sign % to the saturation and lightness values.

Lightness is how bright a color appears, from 0%, or complete black, to 100%, 
complete white, with 50% being neutral.


You've learned a few ways to set flat colors in CSS, 
but you can also use a color transition, or gradient, on an element.

A gradient is when one color transitions into another. 
The CSS linear-gradient function lets you control the direction of the transition along 
a line, and which colors are used.

One thing to remember is that the linear-gradient function actually creates an image element, 
and is usually paired with the background property which can accept an image as a value.

<!--
The linear-gradient function is very flexible -- here is the basic syntax 
you'll use in this tutorial:

linear-gradient(gradientDirection, color1, color2, ...);

eg:-
.red {
  background: linear-gradient(90deg, rgb(255,0,0), rgb(0,255,0));
}


gradientDirection is the direction of the line used for the transition. 
color1 and color2 are color arguments, which are the colors that will be used in 
the transition itself. 
These can be any type of color, including color keywords, hex, rgb, or hsl.

-->


Color-stops allow you to fine-tune where colors are placed along the gradient line. 
They are a length unit like px or percentages that follow a color in the 
linear-gradient function.

For example, in this red-black gradient, the transition from red to black 
takes place at the 90% point along the gradient line, so red takes up most of the 
available space:

linear-gradient(90deg, red 90%, black);
or
.red {
  background: linear-gradient(90deg, rgb(255, 0, 0) 75%, rgb(0, 255, 0), rgb(0, 0, 255));
}

Opacity describes how opaque, or non-transparent, something is. 
For example, a solid wall is opaque, and no light can pass through.
But a drinking glass is much more transparent, and you can see through 
the glass to the other side.

With the CSS opacity property, you can control how opaque or transparent an element is. 
With the value 0, or 0%, the element will be completely transparent, and at 1.0, or 100%,
the element will be completely opaque like it is by default.
opacity: 0.5;

Another way to set the opacity for an element is with the alpha channel. 
Similar to the opacity property, the alpha channel controls how transparent or 
opaque a color is.

You've already set sleeve's opacity with a named color and the opacity property, 
but you can add an alpha channel to the other CSS color properties.


You're already familiar with using the rgb function to set colors. 
To add an alpha channel to an rgb color, use the rgba function instead.

The rgba function works just like the rgb function, but takes one more 
number from 0 to 1.0 for the alpha channel:

rgba(redValue, greenValue, blueValue, alphaValue);
You can also use an alpha channel with hsl and hex colors.

background-color:  rgba(255, 255, 255, 0.5);


All HTML elements have borders, though they're usually set to none by default. 
With CSS, you can control all aspects of an element's border, and set the border
on all sides, or just one side at a time. For a border to be visible, you need to set 
its width and style.

Borders have several styles to choose from. You can make your border a solid line, 
but you can also use a dashed or dotted line if you prefer. Solid border lines are 
probably the most common.

The border-left shorthand property lets you to set the left border's width, style, 
and color at the same time.

Here is the syntax:

border-left: width style color;



<!--
The box-shadow property lets you apply one or more shadows around an element. 
Here is basic syntax:

box-shadow: offsetX offsetY color;
Here's how the offsetX and offsetY values work:

both offsetX and offsetY accept number values in px and other CSS units
a positive offsetX value moves the shadow right and a negative value moves it left
a positive offsetY value moves the shadow down and a negative value moves it up
if you want a value of zero (0) for any or both offsetX and offsetY, you don't need to add a
 unit. Every browser understands that zero means no change.
The height and width of the shadow is determined by the height and width of the element 
it's applied to. You can also use an optional spreadRadius value to spread out the reach 
of the shadow. More on that later.
-->

box-shadow: offsetX offsetY blurRadius color;
If a blurRadius value isn't included, it defaults to 0 and produces sharp edges. 
The higher the value of blurRadius, the greater the blurring effect is.

if you wanted to expand the shadow out further? 
You can do that with the optional spreadRadius value:

box-shadow: offsetX offsetY blurRadius spreadRadius color;